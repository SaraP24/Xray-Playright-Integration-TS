"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXrayMetadata = exports.setXrayMetadata = void 0;
/**
 * The key where Xray related data will be stored in the test attachments.
 */
const ATTACHMENT_KEY = 'xray-metadata';
/**
 * Attaches Xray-specific metadata to (e.g. parameterised test iteration values) to a test run.
 *
 * This data is processed during upload to Xray and is also visible in HTML reports.
 *
 * @example
 *
 * ```ts
 * for (const name of ['Bob', 'George', 'Linda']) {
 *   test(`XRAYTEST-123 | Log in as ${name}`, async ({}, testInfo) => {
 *     setXrayInfo(testInfo, { parameters: { user: name } });
 *     // ...
 *   });
 * }
 * ```
 *
 * @param testInfo - the Playwright test info object provided to the test
 * @param metadata - Xray-specific metadata to attach to the test
 */
async function setXrayMetadata(testInfo, metadata) {
    await testInfo.attach(ATTACHMENT_KEY, {
        body: JSON.stringify(metadata, null, 2),
        contentType: 'application/json',
    });
}
exports.setXrayMetadata = setXrayMetadata;
/**
 * Retrieves any Xray-related metadata that was previously attached to a test.
 *
 * @param testResult - the Playwright test result
 * @returns The parsed Xray metadata object, or `undefined` if not available
 */
function getXrayMetadata(testResult) {
    const existingAttachment = testResult.attachments.find((attachment) => attachment.name === ATTACHMENT_KEY);
    if (!existingAttachment || !existingAttachment.body) {
        return;
    }
    return JSON.parse(existingAttachment.body.toString('utf-8'));
}
exports.getXrayMetadata = getXrayMetadata;
