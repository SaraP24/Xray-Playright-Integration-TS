"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayService = void 0;
const fs = __importStar(require("node:fs"));
const node_util_1 = require("node:util");
const axios_1 = __importDefault(require("axios"));
const picocolors_1 = require("picocolors");
const help_1 = __importDefault(require("./help"));
class XrayService {
    constructor(options) {
        this.requestUrl = '';
        // Init vars
        this.options = options;
        this.help = new help_1.default(this.options.jira.type);
        this.dryRun = options.dryRun === true;
        this.runResult = options.runResult === true;
        this.limitEvidenceSize = options.limitEvidenceSize === undefined ? 104857600 : options.limitEvidenceSize;
        // Set Jira URL
        if (!options.jira.url)
            throw new Error('"jira.url" option is missed. Please, provide it in the config');
        this.jira = options.jira.url;
        // Set Jira Server Type
        if (!options.jira.type)
            throw new Error('"jira.type" option is missed. Please, provide it in the config');
        this.type = options.jira.type;
        // Set Jira API apiVersion
        if (!options.jira.apiVersion)
            throw new Error('"jira.apiVersion" option is missed. Please, provide it in the config');
        this.apiVersion = options.jira.apiVersion;
        // Init axios instance
        this.axios = axios_1.default;
        this.axios.defaults.headers.options = {
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
            Expires: '0',
        };
        if (!this.dryRun) {
            this.initialzeJiraConnection(options);
        }
        // Set Project Key
        if (!options.projectKey)
            throw new Error('"projectKey" option is missed. Please, provide it in the config');
        // Set Test Plan
        if (!options.testPlan)
            throw new Error('"testPlan" option are missed. Please provide them in the config');
    }
    async createRun(results, execInfo) {
        const URL = `${this.requestUrl}/import/execution`;
        const total = results.tests?.length;
        const duration = new Date(results.info.finishDate).getTime() - new Date(results.info.startDate).getTime();
        let passed = 0;
        let failed = 0;
        let flaky = 0;
        let skipped = 0;
        try {
            if (this.options.debug) {
                fs.writeFileSync('xray-payload-debug.json', JSON.stringify(results));
            }
        }
        catch (error) {
            console.log(`Unable to write xray-payload-debug.json : ${error.message}`);
        }
        //console.log(results);
        for (const test of results.tests ?? []) {
            switch (test.status) {
                case 'SKIPPED':
                    skipped = skipped + 1;
                    break;
                case 'PASS':
                case 'PASSED':
                    if (this.isFlaky(test)) {
                        flaky = flaky + 1;
                    }
                    else {
                        passed = passed + 1;
                    }
                    break;
                case 'FAIL':
                case 'FAILED':
                    failed = failed + 1;
                    break;
            }
        }
        try {
            if (this.options.debug || this.options.dryRun) {
                fs.writeFileSync('xray-payload.json', JSON.stringify(results));
            }
            const key = !this.dryRun ? await this.postResultToJira(URL, results) : 'Dry run';
            const action = this.options.testExecution !== undefined ? 'updated' : 'created';
            // Results
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('-------------------------------------'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            if (this.dryRun) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.green)('üòÄ Successfully performed a Dry Run'))}`);
            }
            else {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.green)('üòÄ Successfully sending test results to Jira'))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            if (this.options.description !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Description:       ${this.options.description}`))}`);
            }
            if (this.options.testEnvironments !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test environments: ${this.options.testEnvironments}`))}`);
            }
            if (this.options.version !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Version:           ${this.options.version}`))}`);
            }
            if (this.options.revision !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Revision:          ${this.options.revision}`))}`);
            }
            if (execInfo.browserName !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Browser:           ${execInfo.testedBrowser}`))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test plan:         ${this.options.testPlan}`))}`);
            if (this.options.testExecution !== undefined) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test execution:    ${this.options.testExecution}`))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test Duration:     ${this.help.convertMsToTime(duration)}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Tests ran:         ${total} (including reruns)`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.green)(`Tests passed:      ${passed}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.red)(`Tests failed:      ${failed}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`Flaky tests:       ${flaky}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.white)(`Skipped tests:     ${skipped}`))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('-------------------------------------'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)('‚è∫  '))}${(0, picocolors_1.bold)((0, picocolors_1.blue)(`Test execution ${key} has been ${action}`))}`);
            if (!this.dryRun) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('üëá Check out the test result'))}`);
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(`üîó ${this.jira}browse/${key}`))}`);
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            }
            if (this.runResult)
                writeRunResult(this.options.testPlan);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('-------------------------------------'))}`);
        }
        catch (error) {
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('-------------------------------------'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            let log = '';
            let msg = '';
            if (axios_1.default.isAxiosError(error) && !this.dryRun) {
                log = `Config: ${(0, node_util_1.inspect)(error.config)}\n\n`;
                if (error.response) {
                    msg = (0, node_util_1.inspect)(error.response.data.error);
                    msg = msg.replace(/'/g, '');
                    log += `Status: ${error.response.status}\n`;
                    log += `Headers: ${(0, node_util_1.inspect)(error.response.headers)}\n`;
                    log += `Data: ${(0, node_util_1.inspect)(error.response.data)}\n`;
                }
                else if (error.request) {
                    msg = 'The request was made but no response was received';
                    log += `Error: ${(0, node_util_1.inspect)(error.toJSON())}\n`;
                }
                else {
                    msg = 'Something happened in setting up the request that triggered an error';
                    log += `Error: ${(0, node_util_1.inspect)(error.message)}\n`;
                }
            }
            else {
                log = `Unknown error: ${error}\n`;
            }
            try {
                fs.writeFileSync('playwright-xray-error.log', log);
            }
            catch (error) {
                console.log(`Unable to write playwright-xray-error.log : ${error.message}`);
            }
            const msgs = msg.split(';');
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.red)('üòû Error sending test results to Jira'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            for (const m of msgs) {
                console.log(`${(0, picocolors_1.bold)((0, picocolors_1.red)(`‚õî ${m}`))}`);
            }
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('üëâ Check the "playwright-xray-error.log" file for more details'))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)(' '))}`);
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.blue)('-------------------------------------'))}`);
        }
        function writeRunResult(testPlan) {
            const runResult = {
                browser: execInfo.testedBrowser,
                testPlan: testPlan,
                testDuration: duration,
                testsRun: total,
                testsPassed: passed,
                testsFailed: failed,
                flakyTests: flaky,
                skippedTests: skipped,
            };
            try {
                fs.writeFileSync('runresult.json', JSON.stringify(runResult));
            }
            catch (error) {
                console.log(`Unable to write runresult.json : ${error.message}`);
            }
        }
    }
    initialzeJiraConnection(options) {
        let xray = '';
        let username = '';
        let password = '';
        let token = '';
        switch (this.type) {
            case 'cloud':
                // Set Xray Server URL
                xray = options.cloud?.xrayUrl === undefined || !options.cloud?.xrayUrl ? 'https://xray.cloud.getxray.app/' : options.cloud.xrayUrl;
                // Set Xray Credencials
                if (!options.cloud?.client_id || !options.cloud?.client_secret) {
                    throw new Error('"cloud.client_id" and/or "cloud.client_secret" options are missed. Please provide them in the config');
                }
                username = options.cloud?.client_id;
                password = options.cloud?.client_secret;
                // Set Request URL
                this.requestUrl = new URL('api/v2', xray).toString();
                //Create Axios Instance with Auth
                axios_1.default
                    .post(`${this.requestUrl}/authenticate`, {
                    client_id: username,
                    client_secret: password,
                })
                    .then((request) => {
                    this.axios = axios_1.default.create({
                        baseURL: xray,
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: `Bearer ${request.data}`,
                        },
                    });
                })
                    .catch((error) => {
                    throw new Error(`Failed to authenticate to host ${xray} with error: ${error}`);
                });
                break;
            case 'server':
                // Set Xray Server URL
                if (!options.jira?.url)
                    throw new Error('"host" option is missed. Please, provide it in the config');
                xray = options.jira?.url;
                // Set Xray Credencials
                if (options.server) {
                    if ('token' in options.server) {
                        token = options.server.token;
                    }
                    else if ('username' in options.server && 'password' in options.server) {
                        username = options.server.username;
                        password = options.server.password;
                    }
                    else {
                        throw new Error('"server.token" or "server.username & server.password" options are missing. Please provide either token or username and password in the config');
                    }
                }
                // Set Request URL
                this.requestUrl = xray + (this.apiVersion !== '1.0' ? `rest/raven/${this.apiVersion}/api` : 'rest/raven/1.0');
                //Create Axios Instance with Auth
                if (token) {
                    this.axios = axios_1.default.create({
                        baseURL: xray,
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: `Bearer ${token}`,
                        },
                    });
                }
                if (username && password) {
                    this.axios = axios_1.default.create({
                        baseURL: xray,
                        auth: {
                            username,
                            password,
                        },
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });
                }
                break;
        }
    }
    async postResultToJira(URL, results) {
        this.trimEvidence(results);
        const response = await this.axios.post(URL, JSON.stringify(results), {
            maxBodyLength: 107374182400,
            maxContentLength: 107374182400,
            timeout: 600000,
            proxy: this.options.proxy !== undefined ? this.options.proxy : false,
        });
        if (response.status !== 200)
            throw new Error(`${response.status} - Failed to create test cycle`);
        let key = response.data.key;
        if (this.options.jira.type === 'server') {
            key = response.data.testExecIssue.key;
        }
        return key;
    }
    isFlaky(test) {
        if (test.iterations?.some((iteration) => iteration.status === this.help.convertPwStatusToXray('failed') ||
            iteration.status === this.help.convertPwStatusToXray('timedOut'))) {
            if (this.options.markFlakyWith) {
                test.status = this.options.markFlakyWith;
            }
            return true;
        }
        return false;
    }
    trimEvidence(results) {
        if (results.tests === undefined)
            return;
        if (byteSize(JSON.stringify(results)) < this.limitEvidenceSize)
            return;
        for (let i = results.tests.length - 1; i > 0; i--) {
            if (results.tests[i].status.includes('PASS'))
                continue;
            console.log(`${(0, picocolors_1.bold)((0, picocolors_1.yellow)(`‚ö†Ô∏è  Removing evidence from:  ${results.tests[i].testKey}`))}`);
            if (this.options.server)
                results.tests[i].evidences = [];
            else
                results.tests[i].evidence = [];
            if (byteSize(JSON.stringify(results)) < this.limitEvidenceSize)
                break;
        }
        if (this.options.debug)
            fs.writeFileSync('xray-payload-trim.json', JSON.stringify(results));
    }
}
exports.XrayService = XrayService;
const byteSize = (str) => new Blob([str]).size;
